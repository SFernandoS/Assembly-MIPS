#Alvaro Henrique de Sousa Gouvea - 180012002
#Fernando Vargas Teotonio de Oliveira - 180016491		
		.data
quebra: 	.asciiz "\n"
invalidaStr:	.asciiz  "Entradas invalidas\n"
result:		.asciiz  "inverso = "
primoStr:	.asciiz  "O modulo nao eh primo\n"
		.text
  main:
  	li $v0, 5			#lê o primeiro numero 'p'
  	syscall
  	move $s1, $v0			#guarda 'p'
  	
  	li $v0, 5			#lê p segundo numero 'a'
  	syscall
  	move $s0, $v0			#guarda 'a'
    	
  	ble $s1, 1, invalida 		#entrada invalida
  	ble $s0, 1, invalida 		#entrada invalida
  
  	beq $s1, 2, inverso		#numero 2 eh primo
  	beq $s1, 3, inverso		#numero 3 eh primo
  	
  primo:				#verificar se 'p' eh primo
  	sub $t0, $s1, 1			#p - 1
  	rem $t0, $t0, 4			# (p-1) % 4
 	beqz $t0, inverso		# se for 0 nao eh primo
 	 	 	
  	sub $t0, $s1, 3			#p - 3
  	rem $t0, $t0, 4			# (p-1) % 4
  	beqz $t0, inverso		# se for 0 nao eh primo
 
  	j naoPrimo

inverso:  	
  	divu $s0, $s1			#Verifica se são multiplos
  	mfhi $t0			#resto
  	beqz $t0, invalida		#entrada invalidas

  	add $a0, $zero, 1		#esse vai ser o resultado
  	sub $t0, $s1, 2			#t0 = (p - 2)
  	add $t2, $t0, $zero		# t2 = p
 loop:
  	rem $t1, $t0, 2			#t1 = p % 2
  				
  	bne $t1, 1, volta		#t1 = p % 2 == 1?
  	
  	mul  $t5, $a0, $s0		#resultado * a
 	divu $t5, $s1			#(resultado * a) % p
 	mfhi $t5
 	add $a0, $t5, $zero		#guarda no resultado
 	
 volta:
  	divu $s0, $s1			# mod(x)
  	mfhi $s0
  	mul $s0, $s0, $s0		# mod(x) * mod(x)
  	divu $s0, $s1			#(mod(x) * mod(x))mod(x)
  	mfhi $s0			#resto
  	beq $t0, $t2, first		#primeira vez
  	divu $t0, $t0, 2		# p /= 2
  	mflo $t0
 	bgt $t0, 0, loop 		# t0 > 0?
  	
 resultado:
  	move $t6 $a0			#coloca o resultado temporariamente em t6 
  	
 	la $a0, result        		# inverso =
    	li $v0, 4
  	syscall
  	
  	move $a0, $t6			#coloca o resultado em a0 para imprimir
  
  	li $v0,1			#Imprime o resultado
	syscall
  	 
  	la $a0, quebra        		# \n
    	li $v0, 4
  	syscall
  	
  	j end
  	
  invalida:
  	la $a0, invalidaStr       	#Entrada invalida
    	li $v0, 4
  	syscall
  	
  	j end
  	
  naoPrimo:
  	la $a0, primoStr       		#O modulo nao eh primo
    	li $v0, 4
  	syscall
  	  	
  end:
    	li $v0, 10			#fim da execução
    	syscall
    	jr $ra				#return 0

first:
	divu $t0, $t0, 2		# n /= 2
	mflo $t0			
	ble  $t0, 0, resultado 		# t0 =< 0?
	j loop
